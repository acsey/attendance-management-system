generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  HR
  WORKER
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  password        String
  name            String?
  role            Role           @default(WORKER)
  hiredDate       DateTime?
  department      String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  attendances     Attendance[]
  qrAttendances   QRAttendance[]
  sessions        Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Attendance {
  id          Int       @id @default(autoincrement())
  userId      String
  checkTime   DateTime
  checkType   String    // "I" for check-in, "O" for check-out
  verifyCode  Int       // Original verification code from biometric
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  sourceId    String?   // ID from the SQL Server database
  synced      Boolean   @default(false)

  @@index([userId, checkTime])
  @@index([sourceId])
  @@map("attendances")
}

model QRAttendance {
  id          Int       @id @default(autoincrement())
  userId      String
  checkTime   DateTime
  checkType   String    // "I" for check-in, "O" for check-out
  location    Json?     // Geolocation data
  ipAddress   String?
  deviceInfo  String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId, checkTime])
  @@map("qr_attendances")
}

model SyncLog {
  id          Int       @id @default(autoincrement())
  tableName   String    // Name of the table being synced
  lastSyncId  Int?      // Last ID synced from SQL Server
  lastSyncTime DateTime // Last successful sync time
  status      String    // "success" or "error"
  error       String?   // Error message if sync failed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("sync_logs")
}

model ReportConfig {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  query       String    // SQL query template for the report
  schedule    String?   // Cron expression for automated generation
  recipients  String[]  // Email addresses for automated delivery
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reports     Report[]

  @@map("report_configs")
}

model Report {
  id          Int          @id @default(autoincrement())
  configId    Int
  startDate   DateTime
  endDate     DateTime
  format      String       // "PDF", "CSV", etc.
  fileUrl     String       // URL to download the report
  createdAt   DateTime     @default(now())
  config      ReportConfig @relation(fields: [configId], references: [id])

  @@map("reports")
}
